class Solution {
    public boolean isValid(String s) {
        Stack<Character> stk=new Stack<Character>();
        for(char c:s.toCharArray())//...s.toCharArray() makes an array of string s=[{]()}
        {
            if(c=='(')
            stk.push(')');
            else if(c=='{')
            stk.push('}');
            else if(c=='[')
            stk.push(']');
            else if(stk.isEmpty() || c!=stk.pop())
            return false;
        }
       // return true;
       return stk.isEmpty();//works if s=']'



        // //Bruteforce..NO

        // //we can't int count=0;
        //  Stack<Character> stack = new Stack<Character>(); // create an empty stack
        // for (char c : s.toCharArray()) { // loop through each character in the string
        //     if (c == '(') // if the character is an opening parenthesis
        //         stack.push(')'); // push the corresponding closing parenthesis onto the stack
        //     else if (c == '{') // if the character is an opening brace
        //         stack.push('}'); // push the corresponding closing brace onto the stack
        //     else if (c == '[') // if the character is an opening bracket
        //         stack.push(']'); // push the corresponding closing bracket onto the stack
        //     else if (stack.isEmpty() || stack.pop() != c) // if the character is a closing bracket
        //         // if the stack is empty (i.e., there is no matching opening bracket) or the top of the stack
        //         // does not match the closing bracket, the string is not valid, so return false
        //         return false;
        //     //System.out.println(stack);
        // }
        //         return stack.isEmpty();

        // Map<Character,Integer> map=new HashMap<>();
        // for(char n:s.toCharArray())
        // {
        //     map.put(n,map.getOrDefault(n,0)+1);
        // }
        
        // //we can't traverse a hashmap but values we can, as an array form so we can
        // for(int count:map.values())
        // {
        //     if(count%2!=0 || count==0)
        //     return false;
        // }
        // return true;
        
    }
}
