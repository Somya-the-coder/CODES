class MinStack {

    Stack<Integer> stk=new Stack<Integer>();
    Stack<Integer> minStack=new Stack<Integer>();
    public MinStack() {
        
    }
    
    public void push(int val) {
        stk.push(val);

        // Push to minStack if empty or current element is smaller or equal
        if (minStack.isEmpty() || val <= minStack.peek()) {
            minStack.push(val);
        }
    }
    
    public void pop() {//in qs said won't return anything
        int k=stk.pop();

        // If the popped value is the current minimum, pop from minStack as well
        if (k == minStack.peek()) {
            minStack.pop();
        }
    }
    
    public int top() {
        return stk.peek();//or return stk.pop();
    }
    
    public int getMin() {
        if (minStack.isEmpty())
        {
            System.out.println("Stack is empty");
            return -1;
        }
        return minStack.peek();

    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
